#!/usr/bin/env zsh

full_cmd=$0

die() { >&2 echo $*; exit 111 }

[[ -r ~/.config/yammit/env ]] && source ~/.config/yammit/env
[[ -z "$YAMMIT_RECEIVER_HOST" ]] && die "Please set YAMMIT_RECEIVER_HOST"

typeset -A noArgumentGetFunctions
noArgumentGetFunctions=(
  getBluetoothDeviceList system
  getBluetoothInfo system
  getDeviceInfo system
  getFeatures system
  getFuncStatus system
  getMacAddressFilter system
  getNetworkStatus system
  getPlayInfo netusb
  getRecentInfo netusb
)

zoneCompletionFunctions=(
  getSoundProgramList
  getStatus
  setInput
  setMute
  setPower
  setSleep
  setVolume
)

playbackStatuses=(
  fast_forward_end
  fast_forward_start
  fast_reverse_end
  fast_reverse_start
  next
  pause
  play
  play_pause
  previous
  stop
)

powerStatuses=(on standby toggle)

yammit_call() {
  base_url=http://$YAMMIT_RECEIVER_HOST/YamahaExtendedControl/v1
  curl --silent "$base_url/$1" | jq .
}

getFeatures() { yammit_call "system/getFeatures" }
yammit_zones() { getFeatures | jq -r '.zone[] | .id' }

subcommands=(${(k)noArgumentGetFunctions} $zoneCompletionFunctions setPlayback)

usage() { die "usage: $full_cmd [$subcommands]" }

action=$1; shift

if [ -n "$noArgumentGetFunctions[(I)$action]" ]; then
  root=$noArgumentGetFunctions[$action]
  yammit_call "$root/$action"
  exit $?
fi

if [ $zoneCompletionFunctions[(I)$action] -gt 0 ]; then
  if [ "$1" = "--completion" ]; then
    yammit_zones
    exit $?
  elif [ -z "$1" ]; then
    usage
  fi
fi

case "$action" in
  getSoundProgramList)
    zone=$1; shift
    yammit_call "${zone}/getSoundProgramList"
    ;;
  getStatus)
    zone=$1; shift
    yammit_call "${zone}/getStatus"
    ;;
  setInput)
    if [ "$2" = "--completion" ]; then
      getFeatures | jq -r '.system | .input_list[] | .id'
    else
      zone=$1; shift
      input=$1; shift
      # TK optional "mode" param
      yammit_call "${zone}/setInput?input=${input}"
    fi
    ;;
  setMute)
    if [ "$2" = "--completion" ]; then
      printf "false\ntrue\n"
    else
      zone=$1; shift
      enable=$1; shift
      yammit_call "${zone}/setMute?enable=${enable}"
    fi
    ;;
  setPlayback)
    if [ "$1" = "--completion" ]; then
      printf "%s\n" ${playbackStatuses[@]}
    else
      playback=$1; shift
      yammit_call "netusb/setPlayback?playback=${playback}"
    fi
    ;;
  setPower)
    if [ "$2" = "--completion" ]; then
      printf "%s\n" ${powerStatuses[@]}
    else
      zone=$1; shift
      power=$1; shift
      yammit_call "${zone}/setPower?power=${power}"
    fi
    ;;
  setSleep)
    if [ "$2" = "--completion" ]; then
      printf "0\n30\n60\n90\n120\n"
    else
      zone=$1; shift
      sleep=$1; shift
      yammit_call "${zone}/setSleep?sleep=${sleep}"
    fi
    ;;
  setVolume)
    if [ "$2" = "--completion" ]; then
      printf "up\ndown\n" # TK also accept integers in range_step
    else
      zone=$1; shift
      volume=$1; shift
      yammit_call "${zone}/setVolume?volume=${volume}"
    fi
    ;;
  --completion)
    printf "%s\n" ${(k)noArgumentGetFunctions} $zoneCompletionFunctions setPlayback
    ;;
  *)
    usage ;;
esac

#!/usr/bin/env zsh

full_cmd=$0

die() { >&2 echo $*; exit 111 }

[[ -r ~/.config/yammit/env ]] && source ~/.config/yammit/env
[[ -z "$YAMMIT_RECEIVER_HOST" ]] && die "Please set YAMMIT_RECEIVER_HOST"

typeset -A noArgumentGetFunctions
noArgumentGetFunctions=(
  getBluetoothDeviceList system
  getBluetoothInfo system
  getDeviceInfo system
  getFeatures system
  getFuncStatus system
  getMacAddressFilter system
  getNetworkStatus system
  getPlayInfo netusb
  getRecentInfo netusb
)

zoneCompletionFunctions=(
  getSignalInfo
  getSoundProgramList
  getStatus
  setInput
  setMute
  setPower
  setSleep
  setSoundProgram
  setSurroundDecoderType
  setVolume
)

playbackStatuses=(
  fast_forward_end
  fast_forward_start
  fast_reverse_end
  fast_reverse_start
  next
  pause
  play
  play_pause
  previous
  stop
)

powerStatuses=(on standby toggle)

yammit_call() {
  base_url=http://$YAMMIT_RECEIVER_HOST/YamahaExtendedControl/v1
  curl --silent "$base_url/$1" | jq .
}

getFeatures() { yammit_call "system/getFeatures" }
getSoundProgramList() { yammit_call "$1/getSoundProgramList" }
yammit_zones() { getFeatures | jq -r '.zone[] | .id' }

subcommands=(${(k)noArgumentGetFunctions} $zoneCompletionFunctions setPlayback)

usage() { die "usage: $full_cmd [$subcommands]" }

action=$1; shift

if [ -n "$noArgumentGetFunctions[(I)$action]" ]; then
  [[ -z "$1" ]] || exit 0
  root=$noArgumentGetFunctions[$action]
  yammit_call "$root/$action"
  exit $?
fi

if [ $zoneCompletionFunctions[(I)$action] -gt 0 ]; then
  if [ "$1" = "--completion" ]; then
    yammit_zones
    exit $?
  elif [ -z "$1" ]; then
    usage
  fi
fi

case "$action" in
  getSignalInfo)
    zone=$1; [[ -z "$2" ]] || exit 0
    yammit_call "${zone}/getSignalInfo"
    ;;
  getSoundProgramList)
    zone=$1; [[ -z "$2" ]] || exit 0
    getSoundProgramList "$zone"
    ;;
  getStatus)
    zone=$1; [[ -z "$2" ]] || exit 0
    yammit_call "${zone}/getStatus"
    ;;
  setInput)
    zone=$1; input=$2; [[ -z "$3" ]] || exit 0
    if [ "$input" = "--completion" ]; then
      getFeatures | jq -r '.system | .input_list[] | .id'
    else
      # TK accept optional "mode" param
      yammit_call "${zone}/setInput?input=${input}"
    fi
    ;;
  setMute)
    zone=$1; enable=$2; [[ -z "$3" ]] || exit 0
    if [ "$enable" = "--completion" ]; then
      printf "%s\n" false true
    else
      yammit_call "${zone}/setMute?enable=${enable}"
    fi
    ;;
  setPlayback)
    playback=$1; [[ -z "$2" ]] || exit 0
    if [ "$playback" = "--completion" ]; then
      printf "%s\n" ${playbackStatuses[@]}
    else
      yammit_call "netusb/setPlayback?playback=${playback}"
    fi
    ;;
  setPower)
    zone=$1; power=$2; [[ -z "$3" ]] || exit 0
    if [ "$power" = "--completion" ]; then
      printf "%s\n" ${powerStatuses[@]}
    else
      yammit_call "${zone}/setPower?power=${power}"
    fi
    ;;
  setSleep)
    zone=$1; sleep=$2; [[ -z "$3" ]] || exit 0
    if [ "$sleep" = "--completion" ]; then
      printf "%d\n" 0 30 60 90 120
    else
      yammit_call "${zone}/setSleep?sleep=${sleep}"
    fi
    ;;
  setSoundProgram)
    zone=$1; program=$2; [[ -z "$3" ]] || exit 0
    if [ "$program" = "--completion" ]; then
      getSoundProgramList "$zone" | jq -r '.sound_program_list | sort[]'
    else
      yammit_call "${zone}/setSoundProgram?program=${program}"
    fi
    ;;
  setSurroundDecoderType)
    zone=$1; type=$2; [[ -z "$3" ]] || exit 0
    if [ "$type" = "--completion" ]; then
      echo "auto"
      getFeatures | jq --arg zone "$zone" -r \
        '.zone[] | select(.id == $zone).surr_decoder_type_list | sort[]'
    else
      yammit_call "${zone}/setSurroundDecoderType?type=${type}"
    fi
    ;;
  setVolume)
    zone=$1; volume=$2; [[ -z "$3" ]] || exit 0
    if [ "$2" = "--completion" ]; then
      printf "%s\n" up down # TK also accept integers in range_step
    else
      yammit_call "${zone}/setVolume?volume=${volume}"
    fi
    ;;
  --completion)
    printf "%s\n" ${(k)noArgumentGetFunctions} $zoneCompletionFunctions setPlayback
    ;;
  --completion-code)
    cmd=$(basename "$full_cmd")
    echo "compctl -K _${cmd} ${cmd}"
    echo "_${cmd}() {"
    echo '  local words; read -cA words; shift -p words'
    echo '  reply=($($words --completion))'
    echo '}'
    ;;
  *)
    usage ;;
esac
